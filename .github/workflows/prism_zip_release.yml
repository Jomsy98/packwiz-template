name: Build and Release Prism Zip

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

# Set permissions required for creating releases
permissions:
  contents: write # This is required for creating releases and pushing tags

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download packwiz installer bootstrap
        run: |
          mkdir -p prism/minecraft
          curl -L -o prism/minecraft/packwiz-installer-bootstrap.jar https://github.com/packwiz/packwiz-installer-bootstrap/releases/latest/download/packwiz-installer-bootstrap.jar
      - name: Replace placeholders in files
        run: |
          # Extract repository name and owner from GITHUB_REPOSITORY
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)
          REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)
          
          # Replace placeholders in all files in prism directory
          find prism -type f -exec sed -i "s/\[REPO\]/$REPO_NAME/g" {} \;
          find prism -type f -exec sed -i "s/\[USERNAME\]/$REPO_OWNER/g" {} \;
          
          echo "Replaced [REPO] with $REPO_NAME and [USERNAME] with $REPO_OWNER in all files"
      - name: Zip prism directory
        run: |
          zip -r prism.zip prism
      - name: Get version from pack.toml
        run: |
          VERSION=$(grep '^version =' packwiz/pack.toml | head -n1 | cut -d'=' -f2 | tr -d ' "')
          if [ -z "$VERSION" ]; then VERSION="0.0.0"; fi
          echo "version=$VERSION" >> $GITHUB_ENV
      - name: Create tag if missing
        run: |
          git fetch --tags
          if ! git rev-parse "refs/tags/$version" >/dev/null 2>&1; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "$version"
            git push origin "$version"
          fi
          
      - name: Delete existing release
        run: |
          # Delete the release if it exists (ignoring errors if it doesn't)
          gh release delete $version --yes || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.version }}
          release_name: Release ${{ env.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./prism.zip
          asset_name: prism.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
