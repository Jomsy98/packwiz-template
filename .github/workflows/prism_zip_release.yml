name: Build and Release Prism Zip

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

# Set permissions required for creating releases
permissions:
  contents: write # This is required for creating releases and pushing tags

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download packwiz installer bootstrap
        run: |
          mkdir -p prism/minecraft
          curl -L -o prism/minecraft/packwiz-installer-bootstrap.jar https://github.com/packwiz/packwiz-installer-bootstrap/releases/latest/download/packwiz-installer-bootstrap.jar

      - name: Copy logo into prism as modpack.png
        run: |
          # Copy repository root server-icon.png into prism as modpack.png (fallback to existing if missing)
          if [ -f ./server-icon.png ]; then
            cp ./server-icon.png ./prism/modpack.png
            echo "Copied server-icon.png -> prism/modpack.png"
          else
            echo "server-icon.png not found in repo root; skipping copy"
          fi
      - name: Get version from pack.toml
        id: get_version
        run: |
          VERSION=$(grep '^version =' packwiz/pack.toml | head -n1 | cut -d'=' -f2 | tr -d ' "')
          if [ -z "$VERSION" ]; then VERSION="0.0.0"; fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Zip prism directory
        run: |
          zip -r prism.zip prism

      - name: Create or update tag for version
        run: |
          git fetch --tags
          # Force create/update tag pointing at current HEAD and push it
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          VERSION=${{ steps.get_version.outputs.version }}
          echo "Creating/updating tag $VERSION"
          git tag -f "$VERSION"
          git push -f origin "refs/tags/$VERSION"

      - name: Delete existing release
        run: |
          # Delete the release if it exists (ignore errors if it doesn't)
          gh release delete "${{ steps.get_version.outputs.version }}" --yes || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./prism.zip
          asset_name: prism.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
