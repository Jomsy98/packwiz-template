name: Packwiz Refresh

on:
  push:
    branches:
      - main
    paths:
      - 'packwiz/**'
      - '.env'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  refresh:
    runs-on: ubuntu-latest
    # Only run this workflow in forks/other repos, not in the template repository
    if: github.repository != 'Jomsy98/packwiz-template'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load .env or set defaults and replace pack.toml placeholders
        run: |
          # Safe function to load env files (handles quoted and unquoted values)
          load_env() {
            local env_file="$1"
            if [ ! -f "$env_file" ]; then return; fi
            
            while IFS='=' read -r key value || [ -n "$key" ]; do
              # Skip comments and empty lines
              [[ "$key" =~ ^[[:space:]]*# ]] && continue
              [[ -z "$key" ]] && continue
              
              # Trim whitespace from key
              key=$(echo "$key" | xargs)
              
              # Remove quotes from value if present, otherwise keep as-is
              value=$(echo "$value" | sed -e 's/^"//' -e 's/"$//' -e "s/^'//" -e "s/'$//")
              
              # Export the variable
              export "$key=$value"
            done < "$env_file"
          }
          
          # Load .env if it exists, otherwise use .env.example
          if [ -f .env ]; then
            echo "📦 Loading variables from .env"
            load_env .env
          elif [ -f .env.example ]; then
            echo "📦 Loading variables from .env.example (fallback)"
            load_env .env.example
          fi
          
          # Function to replace variables in a file
          replace_vars() {
            local file="$1"
            if [ ! -f "$file" ]; then return; fi
            
            echo "  📝 Processing: $file"
            
            # Find all {{VARIABLE}} patterns and replace them
            for var_pattern in $(grep -oP '\{\{[A-Z_]+\}\}' "$file" 2>/dev/null | sort -u || true); do
              var_name="${var_pattern:2:-2}"  # Remove {{ and }}
              var_value="${!var_name}"
              
              if [ -n "$var_value" ]; then
                # Escape special characters for sed (/, &, \, newlines, and other special chars)
                escaped_value=$(printf '%s\n' "$var_value" | sed -e 's/[\/&]/\\&/g' -e 's/$/\\n/' | tr -d '\n' | sed -e 's/\\n$//')
                # Replace in file using | as delimiter to avoid conflicts with /
                sed -i "s|{{${var_name}}}|${escaped_value}|g" "$file"
                echo "    ✓ {{${var_name}}} = ${var_value}"
              fi
            done
          }
          
          # Replace variables in packwiz/pack.toml
          replace_vars "packwiz/pack.toml"
          
          echo "✅ All variables replaced"
        shell: bash

      - name: Get latest artifact ID
        id: artifact
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ARTIFACT_ID=$(gh api \
            -H "Accept: application/vnd.github+json" \
            repos/packwiz/packwiz/actions/artifacts \
            --jq '.artifacts | map(select(.name == "Linux 64-bit x86")) | sort_by(.created_at) | reverse | .[0].id')
          echo "artifact_id=$ARTIFACT_ID" >> $GITHUB_OUTPUT

      - name: Download artifact
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            -H "Accept: application/vnd.github+json" \
            repos/packwiz/packwiz/actions/artifacts/${{ steps.artifact.outputs.artifact_id }}/zip \
            > packwiz-linux-x86.zip
          unzip packwiz-linux-x86.zip -d packwiz-bin

      - name: Make packwiz executable
        run: |
          chmod +x packwiz-bin/packwiz

      - name: Run packwiz refresh
        working-directory: packwiz
        run: |
          # Run packwiz from inside the packwiz directory so it operates on local files
          ../packwiz-bin/packwiz refresh

      - name: Commit packwiz changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add the packwiz files
          git add packwiz/index.toml packwiz/pack.toml
          
          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: refresh packwiz index and pack files"
            
            # Pull latest changes before pushing in case other workflows committed
            git pull --rebase origin main
            
            git push
            echo "Packwiz files updated and committed"
          fi