# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths:
      - 'index.html'
      - 'styles.css'
      - 'server-icon.png'
      - 'packwiz/pack.toml'
      - 'CHANGELOG.md'
      - '.env'
      - '.github/workflows/static_webpage.yml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Replace placeholders in index.html
        run: |
          # Set default values
          MODPACK_NAME="Modpack Template"
          MODPACK_DESCRIPTION="This is a modpack template for PackwizBuilder!"
          
          # Check if .env file exists and source it
          if [ -f .env ]; then
            echo "Found .env file, loading variables..."
            # Export variables from .env safely
            set -a; source .env; set +a
          else
            echo "No .env file found, using default values"
          fi
          
          # Determine zip filename (same logic as prism_zip_release)
          if [ -n "$MODPACK_NAME" ] && [ "$MODPACK_NAME" != "" ]; then
            ZIP_FILENAME="${MODPACK_NAME}.zip"
          else
            ZIP_FILENAME="Unnamed_Modpack.zip"
          fi
          
          # Extract repository owner and name from GITHUB_REPOSITORY
          REPO_OWNER="${GITHUB_REPOSITORY%/*}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          
          # Create download URL
          DOWNLOAD_URL="https://github.com/${REPO_OWNER}/${REPO_NAME}/releases/latest/download/${ZIP_FILENAME}"
          
          # Replace placeholders in index.html
          sed -i "s|\[Modpack Name\]|${MODPACK_NAME}|g" index.html
          sed -i "s|\[Modpack Description\]|${MODPACK_DESCRIPTION}|g" index.html
          sed -i "s|\[DOWNLOAD_URL\]|${DOWNLOAD_URL}|g" index.html
          sed -i "s|\[ZIP_FILENAME\]|${ZIP_FILENAME}|g" index.html
          
          echo "Replaced placeholders:"
          echo "  MODPACK_NAME=${MODPACK_NAME}"
          echo "  MODPACK_DESCRIPTION=${MODPACK_DESCRIPTION}"
          echo "  REPO_OWNER=${REPO_OWNER}"
          echo "  REPO_NAME=${REPO_NAME}"
          echo "  ZIP_FILENAME=${ZIP_FILENAME}"
          echo "  DOWNLOAD_URL=${DOWNLOAD_URL}"
        shell: bash
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          # Upload entire repository root which contains all the files
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
