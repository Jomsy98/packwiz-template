name: Update README with Environment Variables

on:
  push:
    branches: ["main"]
    paths:
      - 'README.md'
      - '.env'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    # Only run this workflow in forks/other repos, not in the template repository
    if: github.repository != 'Jomsy98/packwiz-template'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for placeholders and update README
        id: update_readme
        run: |
          # Safe function to load env files (handles quoted and unquoted values)
          load_env() {
            local env_file="$1"
            if [ ! -f "$env_file" ]; then return; fi
            
            while IFS='=' read -r key value || [ -n "$key" ]; do
              # Skip comments and empty lines
              [[ "$key" =~ ^[[:space:]]*# ]] && continue
              [[ -z "$key" ]] && continue
              
              # Trim whitespace from key
              key=$(echo "$key" | xargs)
              
              # Remove quotes from value if present, otherwise keep as-is
              value=$(echo "$value" | sed -e 's/^"//' -e 's/"$//' -e "s/^'//" -e "s/'$//")
              
              # Export the variable
              export "$key=$value"
            done < "$env_file"
          }
          
          # Load .env if it exists, otherwise use .env.example
          if [ -f .env ]; then
            echo "📦 Loading variables from .env"
            load_env .env
          elif [ -f .env.example ]; then
            echo "📦 Loading variables from .env.example (fallback)"
            load_env .env.example
          fi
          
          # Check if README.md contains placeholders
          if grep -q "{{MODPACK_NAME}}" README.md || grep -q "{{MODPACK_DESCRIPTION}}" README.md; then
            echo "Placeholders found in README.md"
            echo "has_placeholders=true" >> $GITHUB_OUTPUT
            
            # Function to replace variables in a file
            replace_vars() {
              local file="$1"
              if [ ! -f "$file" ]; then return; fi
              
              echo "  📝 Processing: $file"
              
              # Find all {{VARIABLE}} patterns and replace them
              for var_pattern in $(grep -oP '\{\{[A-Z_]+\}\}' "$file" 2>/dev/null | sort -u || true); do
                var_name="${var_pattern:2:-2}"  # Remove {{ and }}
                var_value="${!var_name}"
                
                if [ -n "$var_value" ]; then
                  # Escape special characters for sed (/, &, \, newlines, and other special chars)
                  escaped_value=$(printf '%s\n' "$var_value" | sed -e 's/[\/&]/\\&/g' -e 's/$/\\n/' | tr -d '\n' | sed -e 's/\\n$//')
                  # Replace in file using | as delimiter to avoid conflicts with /
                  sed -i "s|{{${var_name}}}|${escaped_value}|g" "$file"
                  echo "    ✓ {{${var_name}}} = ${var_value}"
                fi
              done
            }
            
            # Replace variables in README.md
            replace_vars "README.md"
            
            echo "✅ All variables replaced"
          else
            echo "No placeholders found in README.md, nothing to update"
            echo "has_placeholders=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Commit changes
        if: steps.update_readme.outputs.has_placeholders == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          
          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update README with modpack information from .env"
            
            # Pull latest changes before pushing in case other workflows committed
            git pull --rebase origin main
            
            git push
            echo "README.md updated and committed"
          fi
